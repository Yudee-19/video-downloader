name: Deploy Frontend to AWS S3 and CloudFront

on:
    push:
        branches:
            - main
        paths:
            - "frontend/**"
            - ".github/workflows/deploy-frontend.yml"
    workflow_dispatch:

env:
    AWS_REGION: ${{ secrets.AWS_REGION }}
    S3_BUCKET: ${{ secrets.S3_BUCKET }}
    CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
    deploy:
        name: Deploy Frontend
        runs-on: ubuntu-latest
        environment: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  cache: "npm"
                  cache-dependency-path: frontend/package-lock.json

            - name: Install dependencies
              run: |
                  cd frontend
                  npm i

            - name: Build React app
              env:
                  REACT_APP_API_URL: ${{ secrets.API_URL }}
                  CI: false
              run: |
                  cd frontend
                  npm run build

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Sync files to S3
              run: |
                  aws s3 sync frontend/build/ s3://${{ env.S3_BUCKET }}/ \
                    --delete \
                    --cache-control "public,max-age=31536000,immutable" \
                    --exclude "index.html" \
                    --exclude "service-worker.js"

                  # Upload index.html and service-worker.js with no-cache
                  aws s3 cp frontend/build/index.html s3://${{ env.S3_BUCKET }}/index.html \
                    --cache-control "public,max-age=0,must-revalidate"

            - name: Invalidate CloudFront cache
              run: |
                  aws cloudfront create-invalidation \
                    --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
                    --paths "/*"

            - name: Deployment Success Notification
              if: success()
              run: |
                  echo "✅ Frontend deployment successful!"
                  echo "S3 Bucket: ${{ env.S3_BUCKET }}"
                  echo "CloudFront Distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"

            - name: Deployment Failure Notification
              if: failure()
              run: |
                  echo "❌ Frontend deployment failed!"
                  echo "Check the logs above for details."
